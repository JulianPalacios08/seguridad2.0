*/
#include <xc.h>
#include <pic16f887.h>  /*Header file PIC16f887 definitions*/
#include <stdio.h>
#include <string.h>
#include "fuses.h"
#include "lcd.h"
#include "keypad.h"
#include "sensor.h"
#include "canal.h"

//Fila salida del micro entrada del teclado
//Columna entrada del micro salida del teclado

#define LED_GREEN RE0
#define LED_RED RE1
#define LED_BLUE RE2

int Count_Seg=0;
int Count_Mon1=0;
int Count_Mon2=0;
int Count_MonA=0;
int Count_Alrmaseg=0;

void funcion_seg(void);
void funcion_moni(void);
void funcion_block(void);
void funcion_alarma(void);
void sensor_anal_init(void);
void func_ambietal(void);
void funcion_alarma_ambiental(void);
void funcion_moniA(void);


enum State
{
seguridad,
monitoreo,
monitoreo_ambiental,
bloqueo,
alarma,
alarma_ambiental
};

enum State estado;

const char password[5] ={'1','2','3','4',0};
char pass_user[5];
unsigned char idx = 0;
unsigned char contador = 0;
unsigned char tiempo = 0;
unsigned char flag_timeout=0;

   
unsigned char var_sensor_ir = 0;
unsigned char var_sensor_hall = 0;
unsigned char var_sensor_metal = 0;

char buffer [17];


void main() {
   
    //Configura Fosc = 8Mhz interno, Fuente de Fosc del sistema = interno
    OSCCON = 0x71; //Configura oscilador interno (FOSC = 8Mhz)
    TRISE=0;
    LCD_Init(); //Inicializa el LCD

    keypad_init(); //Inicializa el keypad
   
    TRISC=0x07;
   
    var_sensor_ir = SENSOR_IR;
    var_sensor_hall = SENSOR_HALL;
    var_sensor_metal = SENSOR_METAL;
   
    sensor_anal_init();
    adc_int();
    LCD_String_xy(0,0,"cond ambientales");
    __delay_ms(2000);
    LCD_Clear();
   
    estado = seguridad;
   
    while(1){
        if(estado == seguridad){
            funcion_seg();
        }
        else if(estado == monitoreo){
            funcion_moni();
         }
        else if(estado == bloqueo){
            funcion_block();
        }
        else if(estado == alarma){
            funcion_alarma();
        }
        else if(estado == monitoreo_ambiental){
            func_ambietal();
        }
        else{
            funcion_alarma_ambiental();
        }
    }
}


/**
 * @brief Inicializa los sensores analógicos.
 * Configura los pines para los sensores analógicos.
 * @param Void. No recibe parámetros.
 * @return Void. No devuelve ningún valor.
 */
void sensor_anal_init(void){
   //canales para los sensores analogicos
    TRISA0 = 1;
    TRISA1 = 1;
    TRISA4 = 1;
    ANSEL = 0x23; //  Configura el Puerto como Entrada Analógica.
   
   
   
}

//  FUNCION SEGURIDAD
/**
 * @brief Función de seguridad que solicita una contraseña.
 * Si la contraseña es correcta, cambia al estado de monitoreo.
 * Si se ingresan tres intentos incorrectos, cambia al estado de bloqueo.
 * @param Void. No recibe parámetros.
 * @return Void. No devuelve ningún valor.
 */
void funcion_seg(void){
    LCD_String_xy(0,0,"Seguridad");
    __delay_ms(1000);
    char key = 0;
    LCD_String_xy(0,0,"contrasena:");
        LCD_Command(0xC0);
        do{
            key = keypad_getkey();
            if(key != 0){
                LCD_Char('*');/* display pressed key on LCD16x2 */
                //LCD_Char(key);/* display pressed key on LCD16x2 */
                pass_user[idx++] = key;
            }
            __delay_ms(100);
        }while(idx < 4);
       
        if(strncmp(pass_user,password,4)==0){
            LCD_Clear();
            LCD_String_xy(0,0,"bienvenido");
            __delay_ms(2000);
            LED_GREEN = 1;
           
            estado = monitoreo;
        }
        else if(contador<3){
           
            LCD_Clear();
            LCD_String_xy(0,0,"intente de nuevo");
            LED_BLUE = 1;
            contador++;
        }
        else if(contador==3){
            LCD_Clear();
            idx = 0;
            estado = bloqueo;
        }
}

//  FUNCION BLOQUEO
/**
 * @brief Función de bloqueo que bloquea el acceso después de tres intentos fallidos.
 * Después de un tiempo, cambia al estado de seguridad.
 * @param Void. No recibe parámetros.
 * @return Void. No devuelve ningún valor.
 */
void funcion_block(void){
    LCD_String_xy(0,0,"Bloqueo");
    __delay_ms(1000);
            LCD_Clear();
            LCD_String_xy(0,0,"bloqueado");
             LED_RED = 1;
            __delay_ms(2000); //Son 10 seg
            LED_RED = 0;
            estado = seguridad;
}

 //  FUNCION MONITOREO
/**
 * @brief Función de monitoreo que verifica los sensores y cambia al estado de alarma o monitoreo ambiental según los valores obtenidos.
 * @param Void. No recibe parámetros.
 * @return Void. No devuelve ningún valor.
 */
void funcion_moni(void){
    LCD_String_xy(0,0,"Monitoreo");
    __delay_ms(1000);
    LCD_Clear();
    if (monitoring_sensor()==1){
        int n=sprintf (buffer,"sir=%d,sh1=%d,smt=%d",SENSOR_IR,SENSOR_HALL,SENSOR_METAL);
    LCD_Clear();  
    LCD_String_xy(0,0,buffer);
    __delay_ms(2000);
    estado= alarma;
    }
    else if(monitoring_sensor()==0){
        __delay_ms(2000);
        estado=monitoreo_ambiental;
    }
    }


//  FUNCION MONITOREO AMBIENTAL
/**
 * @brief Función de monitoreo ambiental que verifica los valores ambientales y activa la alarma ambiental si la temperatura es alta.
 * Cambia al estado de monitoreo después de un tiempo.
 * @param Void. No recibe parámetros.
 * @return Void. No devuelve ningún valor.
 */
void func_ambietal(void){
    LCD_String_xy(0,0,"Monitoreo A");
    __delay_ms(1000);
     int value_potenciometro= adc_leer(0);
        __delay_ms(10);
        int value_temperature= adc_leer(1);
        int tempcelsius= convertir_temp(value_temperature);
        __delay_ms(10);
        int value_protocell= adc_leer(4);
        int n=sprintf (buffer,"pot=%d,tem=%d,L=%d",value_potenciometro,value_temperature,value_protocell);
        LCD_String_xy(0,0,buffer);
        LCD_String_xy(0,0,"Todo gud");
        __delay_ms(3000);
        estado=monitoreo;
       
        if(tempcelsius>36){
            __delay_ms(2000);
            estado = alarma_ambiental;
        }
        __delay_ms(2000);
        LCD_Clear();
}

 
//  FUNCION ALARMA SEGURIDAD
/**
 * @brief Función de alarma de seguridad que activa el LED rojo intermitentemente como señal de alarma.
 * @param Void. No recibe parámetros.
 * @return Void. No devuelve ningún valor.
 */
void funcion_alarma(void){
    LCD_String_xy(0,0,"Alarma");
    __delay_ms(1000);
    LCD_Clear();
    for(int tiempo=0; tiempo<5; tiempo++){
        LED_RED = 1;
        __delay_ms(500);
        LED_RED = 0;
        __delay_ms(500);
    }
}
//  FUNCION ALARMA AMBIETAL
/**
 * @brief Función de alarma ambiental que activa el LED rojo como señal de alarma por una temperatura alta.
 * Cambia al estado de monitoreo ambiental después de un tiempo.
 * @param Void. No recibe parámetros.
 * @return Void. No devuelve ningún valor.
 */
void funcion_alarma_ambiental(void){
    LCD_String_xy(0,0,"Alarma A");
    __delay_ms(1000);
    LCD_String_xy(0,0,"Temperatura alta");
    LCD_Clear();
    for(int tiempo=0; tiempo<4; tiempo++){
        LED_RED = 1;
        __delay_ms(500);
        LED_RED = 0;
        __delay_ms(500);
        estado=monitoreo_ambiental;
    }
}